@page "/contact"

<PageTitle>Simple Contact Manager</PageTitle>

@using BlazorApp.Data
@inject ContactsService ContactService

<h1>Conctact Manager</h1>

<p>This component is a simple contacts manager</p>

@if (contacts == null)
{
    <p><em>Loading.....</em></p>
}
else{
    <div>
        <div class="action-conatiner">
            @{
                if(selectedContact == null){
                    isDisabled = true;
                }else{
                    isDisabled = false;
                }
            }
            <button class="btn btn-primary"  @onclick="@openModal">Add</button>
            <button class="btn btn-info" @onclick="@EdithContact" disabled=@isDisabled >Edit</button>
            <button class="btn btn-danger" @onclick="@DeleteContact" disabled=@isDisabled >Delete</button>
        </div>
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Number</th>
                    <th>Email</th>
                    <th>Date of creating</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var contact in contacts)
                {
                    <tr @onclick="@(e => onSelected(@contact))" class="@(selectedContact?.Name == contact.Name ? "selected" : null)" >
                        <td>@contact.Name</td>
                        <td>@contact.Number</td>
                        <td>@contact.Email</td>
                        <td>@contact.Date.ToShortDateString()</td>
                    </tr>
                }
            </tbody>
        </table>
        @{
            if(isOpenModal){
                <div id="staticBackdrop" class="modal fade @(isOpenModal? "show" : "")" style="background-color: #00000080; display: @(isOpenModal? "block" : "")">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <EditForm Model="@newcontact" OnValidSubmit="@HandleValidSubmit">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="staticBackdropLabel">Modal title</h5>
                                    <button type="reset" class="btn-close" @onclick="@openModal"></button>
                                </div>
                                <div class="modal-body">
                                    <div class="form-group mb-2">
                                        <label for="name">Name</label>
                                        <InputText id="name" class="form-control" @bind-Value="newcontact.Name" />
                                    </div>
                                    <div class="form-group mb-2">
                                        <label for="number">Number</label>
                                        <InputNumber id="number" class="form-control" @bind-Value="newcontact.Number" />
                                    </div>
                                    <div class="form-group mb-2">
                                        <label for="email">Email</label>
                                        <InputText id="email" class="form-control" @bind-Value="newcontact.Email" />
                                    </div>

                                    <DataAnnotationsValidator />
                                    <ValidationSummary />
                                </div>
                                <div class="modal-footer">
                                    <button type="reset" class="btn btn-secondary" @onclick="@openModal" >Close</button>
                                    <button type="submit" class="btn btn-primary"> Save</button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
}


@code{
    private List<Contact>? contacts;
    private Contact newcontact = new Contact("", "");
        
    private bool isDisabled = false;
    private Contact selectedContact;

    private bool isOpenModal = false;

    private void onSelected (Contact cnt){
        selectedContact = cnt;
    }

    private void openModal(){
        isOpenModal = !isOpenModal;
    }
    
    private void DeleteContact(){
        ContactService.DeleteContact(selectedContact);
        selectedContact = null;
    }

    private void EdithContact(){
        newcontact = selectedContact;
        selectedContact = null;
        openModal();
    }

    private void HandleValidSubmit(){
        newcontact.Date = DateTime.Now;
        if(!string.IsNullOrEmpty(newcontact.Name)){
            ContactService.AddContact(newcontact);
            newcontact = new Contact("", "");
            openModal();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        contacts = await ContactService.GetAllContacts();
    }

}